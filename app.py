import os
from flask import Flask, render_template, request
#from werkzeug import secure_filename
import classifier_perm
import classifier_op
import classifier_api_calls
# import virustotal_report
from werkzeug.utils import secure_filename
from androguard.core.bytecodes.apk import APK
from vtapi3 import VirusTotalAPIFiles, VirusTotalAPIError
import requests
app = Flask(__name__)


UPLOAD_FOLDER = 'apk_data'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/', methods = ['GET','POST'])
def hello_world():
    return render_template('index.html')


@app.route('/uploader', methods = ['GET', 'POST'])
def upload_file():

    if request.method == 'POST':
      f = request.files['apk']
      filename = secure_filename(f.filename)
      f.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
      apk=os.path.join(app.config['UPLOAD_FOLDER'], filename)
      app12=APK(apk)
      name, sdk, size = app12.get_app_name(), app12.get_target_sdk_version(), str(round(os.stat(apk).st_size / (1024 * 1024), 2)) + ' MB'
      print(name," ",sdk," ",size)
      try:
          file_id = VirusTotalAPIFiles.get_file_id(apk)
      except VirusTotalAPIError as err:
          print(err, err.err_code)
      else:
          print(file_id)

      # permission classifier
      svm_perm,rf_perm,perm_op,ann_perm=classifier_perm.classify(os.path.join(app.config['UPLOAD_FOLDER'], filename))
      st1=""
      st2=""
      if svm_perm[0]=='benign':
        svm_perm[0]="Benign"
        st1="Benign"
      else:
        svm_perm[0]="Malign"
        st1="Malign"
      if rf_perm[0]=='benign':
        rf_perm[0]="Benign"
        st2="Benign"
      else:
        rf_perm[0]="Malign"
        st2="Malign"
      #opcode base classifier
      print("According to permissions ")
      print("SVM ",st1)
      print("RF ",st2)
      print("ANN ",ann_perm)
      svm_op,rf_op,res_dict,ann_op=classifier_op.classify(os.path.join(app.config['UPLOAD_FOLDER'], filename),filename)
      print("According to Opcode ")
      #writing permissions
      fl = open("static/perm_op.txt",'w')
      for i in perm_op:
        fl.write(i + "\n")
      fl.close()

      #writtin opcoes
      fl = open("static/opcode.txt",'w')
      for k,v in res_dict.items():
        if v == 0: continue
        fl.write(k + " : " + str(v)+"\n" )
      fl.close()


      if svm_op[0]==0.0:
        svm_opc = "Benign"
      else:
        svm_opc = "Malign"
      if rf_op[0]==0.0:
        rf_opc = "Benign"
      else:
        rf_opc = "Malign"
      print("SVM ",svm_opc)
      print("RF ",rf_opc)
      print("ANN ",ann_op)
      print("According to api call")

      #api classifier
      svm_api,rf_api,api_op1,ann_api=classifier_api_calls.classify(os.path.join(app.config['UPLOAD_FOLDER'], filename))
      # print(api_op1)
      if svm_api[0]==0:
        svm_api_ = "Benign"
      else:
        svm_api_ = "Malign"
      if rf_api[0]==0:
        rf_api_ = "Benign"
      else:
        rf_api_ = "Malign"
      print("SVM ",svm_api_)
      print("RF ",rf_api_)
      print("ANN ",ann_api)
      # print(ann_api)
      #writtin apis
      fl = open("static/api.txt",'w')
      for k,v in api_op1.items():
        if v == 0: continue
        fl.write(k + " : " + str(v)+"\n" )
      fl.close()

      # virustotal_report.get_apk_id(os.path.join(app.config['UPLOAD_FOLDER'], filename))
      return render_template('output.html',svm_perm = svm_perm[0],rf_perm = rf_perm[0],ann_perm=ann_perm,svm_op = svm_opc,
                              rf_op = rf_opc,ann_op=ann_op,svm_api = svm_api_,rf_api = rf_api_,ann_api=ann_api,
                              apk_name = name,fid=file_id,sdk = sdk,apk_size=size)



@app.route('/permissions', methods=['GET', 'POST'])
def permissions():
      fl = open("static/perm_op.txt",'r')
      perm_op = fl.read()
      fl.close()
        
      return render_template('permission.html',permissions = perm_op)

@app.route('/opcode', methods=['GET', 'POST'])
def opcode():
      fl = open("static/opcode.txt",'r')
      opcode = fl.read()
      fl.close()
        
      return render_template('opcode.html',opcode = opcode)

@app.route('/api', methods=['GET', 'POST'])
def api():
      fl = open("static/api.txt",'r')
      api = fl.read()
      fl.close()
        
      return render_template('api.html',api = api)

@app.route('/contacts', methods=['GET', 'POST'])
def contacts():

        
      return render_template('contacts.html')

if __name__ == "__main__":
    app.run(debug=True)