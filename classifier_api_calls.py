import sys
from androguard.core.bytecodes import apk, dvm
import androguard.core.analysis.analysis as analysis
import numpy as np
import re
import pickle
import os
import pandas as pd
import json
 
# Opening JSON file
f = open('apicalls_based/0A0B133B1E100D026D3F7B4678E8DBD35CC07ED948C0D455E33CC3FA8CDCD558.json')
 
# returns JSON object as
# a dictionary
data = json.load(f)


d=data['API']

li={}
for i in d:
    s=i.split('.')[-2]+"."+i.split('.')[-1]
    # print(s)
    li[s]=1

li1=list(li.keys())

len(li1)
android_3=pd.read_csv("apicalls_based/api_calls.txt")
api_calls=android_3.columns

#loading svm model
f=open('apicalls_based/model_svm_apicalls.pickle','rb')
svm_model=pickle.load(f)
f.close()
#loading RF model
f=open('apicalls_based/model_rf_apicalls.pickle','rb')
rf_model=pickle.load(f)
f.close()
filename = 'apicalls_based/apicalls_ann.h5'
loaded_model = pickle.load(open(filename, 'rb'))

def convert(pq):
    api_op={}
    d={}
    for i in api_calls:
        d[i]=0
    d1={}
    methods=[]
    try:
        # print(pq)
        app = apk.APK(pq)
        app_dex = dvm.DalvikVMFormat(app.get_dex())
        app_x = analysis.Analysis(app_dex)
        methods = []
        cs = [cc.get_name() for cc in app_dex.get_classes()]
        for method in app_dex.get_methods():
            g = app_x.get_method(method)
            if method.get_code() == None:
                continue
            for i in g.get_basic_blocks().get():
                 for ins in i.get_instructions():
                        output = ins.get_output()
                        match = re.search(r'(L[^;]*;)->[^\(]*\([^\)]*\).*', output)
                        if match and match.group(1) not in cs:
                            s=match.group()
                            temp=s.split('->')[1]
                            temp1=temp.split('(')[0]
                            s1=s.split(';')[0]
                            s2=s1.split('/')[-1]
                            t2=s1.replace('/','.')+"."+temp1
                            t2=t2[1:]
                            if t2 in data['API']:
                                api_op[t2]=1
                            f=s2+"."+temp1
                            methods.append(f)
                            if f in d:
                                d[f]=1
    except:
        # print(pq)
        pass
    d1[pq] = methods    
    dataset_df12= pd.DataFrame(columns=api_calls)
    dataset_df23=dataset_df12.append(d, ignore_index=True)
    dataset_df2=dataset_df23.drop("class",axis=1)
    return dataset_df2,api_op



def classify(apks):
    test,api_op=convert(apks)
    svm_api=svm_model.predict(test)
    rf_api=rf_model.predict(test)
    # print(svm_api," ",rf_api)
    t=test.iloc[0].to_list()
    t=np.array(t)
    t=t.reshape(1,-1)
    # print(t.shape)
    t=loaded_model.predict(t)
    if t[0]>=0.6:
        ann_api="Malign"
    else:
        ann_api="Benign"
    # print(ann_api)
    return svm_api,rf_api,api_op,ann_api